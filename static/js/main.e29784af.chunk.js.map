{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_onPressSearch","alert","_onPressDownload","fetch","method","body","JSON","stringify","dccon_num","state","dcconNumber","then","res","json","console","log","data","filename","element","document","createElement","setAttribute","style","display","appendChild","click","removeChild","downloadFile","queryText","searchResult","react_default","a","items","map","item","index","key","name","src","thumbnail","alt","_this2","className","id","onChange","e","setState","target","value","onClick","disabled","SearchResultList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAGqBA,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,eAAiB,WACfC,MAAM,mCAVWR,EAoCnBS,iBAAmB,WAUjBC,MAAM,4EAA4E,CAChFC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACC,UAAWf,EAAKgB,MAAMC,gBAE7CC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACJE,QAAQC,IAAIH,GAfO,SAACI,EAAMC,GAC1B,IAAIC,EAAUC,SAASC,cAAc,KACrCF,EAAQG,aAAa,OAAQ,0BAA4BL,GACzDE,EAAQG,aAAa,WAAYJ,GACjCC,EAAQI,MAAMC,QAAU,OACxBJ,SAASd,KAAKmB,YAAYN,GAC1BA,EAAQO,QACRN,SAASd,KAAKqB,YAAYR,GAS1BS,CAAaf,EAAIP,KAAMO,EAAIK,aAnD7BxB,EAAKgB,MAAQ,CACVmB,UAAW,GACXlB,YAAa,MACbmB,aAAc,IALApC,gFAuBFD,GACf,OACEsC,EAAAC,EAAAX,cAAA,WACG5B,EAAMwC,MAAMC,IAAI,SAACC,EAAMC,GAAP,OACfL,EAAAC,EAAAX,cAAA,OAAKgB,IAAKD,GACPD,EAAKG,KACNP,EAAAC,EAAAX,cAAA,OAAKkB,IAAKJ,EAAKK,UAAWC,IAAKN,EAAKG,4CA4BtC,IAAAI,EAAA7C,KACN,OACEkC,EAAAC,EAAAX,cAAA,OAAKsB,UAAU,OACbZ,EAAAC,EAAAX,cAAA,OAAKsB,UAAU,oBACbZ,EAAAC,EAAAX,cAAA,oCACAU,EAAAC,EAAAX,cAAA,SAAOuB,GAAG,cAAcC,SAAU,SAACC,GAAKJ,EAAKK,SAAS,CAAClB,UAAWiB,EAAEE,OAAOC,WAC3ElB,EAAAC,EAAAX,cAAA,UAAQ6B,QAASrD,KAAKI,eAAgBkD,UAAQ,GAA9C,oBAEFpB,EAAAC,EAAAX,cAAA,OAAKsB,UAAU,0BACbZ,EAAAC,EAAAX,cAAAxB,KAAMuD,iBAAN,CAAuBnB,MAAOpC,KAAKa,MAAMoB,gBAE3CC,EAAAC,EAAAX,cAAA,OAAKsB,UAAU,sBACbZ,EAAAC,EAAAX,cAAA,iDACAU,EAAAC,EAAAX,cAAA,SAAOuB,GAAG,gBAAgBC,SAAU,SAACC,GAAKJ,EAAKK,SAAS,CAACpC,YAAamC,EAAEE,OAAOC,WAC/ElB,EAAAC,EAAAX,cAAA,UAAQ6B,QAASrD,KAAKM,kBAAtB,8EAxEuBkD,IAAMC,YCSnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAX,cAACyC,EAAD,MAAS1C,SAAS2C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtD,KAAK,SAAAuD,GACjCA,EAAaC","file":"static/js/main.e29784af.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n       queryText: '',\n       dcconNumber: 52640,\n       searchResult: [],\n    }\n  }\n\n  _onPressSearch = () =>{\n    alert('🚧작업중');\n    return;\n    fetch('https://7d2i8oa48i.execute-api.ap-northeast-2.amazonaws.com/prod/search',{\n      method: 'POST',\n      body: JSON.stringify({query_text: this.state.queryText})\n    })\n    .then(res => res.json())\n    .then(res => {\n      console.log(JSON.parse(res.body));\n      this.setState({searchResult: JSON.parse(res.body)});\n    });\n  }\n\n  SearchResultList(props) {\n    return (\n      <div>\n        {props.items.map((item, index) => (\n          <div key={index}>\n            {item.name}\n            <img src={item.thumbnail} alt={item.name}/>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  _onPressDownload = () => {\n    const downloadFile = (data, filename) => {\n      var element = document.createElement('a');\n      element.setAttribute('href', 'data:text/plain;base64,' + data);\n      element.setAttribute('download', filename);\n      element.style.display = 'none';\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    }\n    fetch('https://7d2i8oa48i.execute-api.ap-northeast-2.amazonaws.com/prod/download',{\n      method: 'POST',\n      body: JSON.stringify({dccon_num: this.state.dcconNumber})\n    })\n    .then(res => res.json())\n    .then(res => {\n      console.log(res);\n      downloadFile(res.body, res.filename);\n    });\n  }\n  \n  render(){\n    return(\n      <div className=\"App\">\n        <div className=\"Search-conatiner\">\n          <span> 검색어 </span>\n          <input id=\"searchInput\" onChange={(e)=>{this.setState({queryText: e.target.value})}}></input>\n          <button onClick={this._onPressSearch} disabled> 검색! </button>\n        </div>\n        <div className=\"SearchResult-container\">\n          <this.SearchResultList items={this.state.searchResult}/>\n        </div>\n        <div className=\"Download-conatiner\">\n          <span> 디씨콘 번호 </span>\n          <input id=\"downloadInput\" onChange={(e)=>{this.setState({dcconNumber: e.target.value})}}></input>\n          <button onClick={this._onPressDownload}> 다운로드! (8~10초정도 걸림) </button>\n        </div>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}