{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_search","queryText","ReactGA","event","category","action","label","setState","loading","fetch","method","body","JSON","stringify","query_text","then","res","json","searchResult","parse","_downloadFile","dccon_num","element","document","createElement","setAttribute","toString","style","display","appendChild","click","removeChild","_onPressDownload","state","dcconNumber","_onPressChromeWebstore","downloadButtonDisabled","react_default","a","className","items","map","item","index","card","type","hoverable","width","key","num","cover","src","concat","thumbnail","alt","name","bodyStyle","textAlign","padding","onClick","downloader","_this2","LoadingOverlay_default","active","styles","content","base","objectSpread","position","top","left","margin","spinner","text","href","input","Search","placeholder","enterButton","size","onSearch","value","SearchResultList","id","onKeyPress","onChange","e","target","disabled","React","Component","Boolean","window","location","hostname","match","initialize","pageview","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a9674c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nimport { Input, Card } from 'antd';\r\nimport ReactGA from 'react-ga';\r\nimport LoadingOverlay from 'react-loading-overlay'\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n       queryText: '',\r\n       dcconNumber: 52640,\r\n       searchResult: [],\r\n       downloadButtonDisabled: false,\r\n       loading: false,\r\n    }\r\n  }\r\n\r\n  _search = (queryText) =>{\r\n    ReactGA.event({\r\n      'category': 'search',\r\n      'action': 'press',\r\n      'label': queryText,\r\n    });\r\n    this.setState({loading: true});\r\n    fetch('https://7d2i8oa48i.execute-api.ap-northeast-2.amazonaws.com/prod/search',{\r\n      method: 'POST',\r\n      body: JSON.stringify({query_text: queryText})\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      this.setState({searchResult: JSON.parse(res.body), loading: false});\r\n    });\r\n  }\r\n\r\n  SearchResultList(props) {\r\n    return (\r\n      <div className=\"SearchResult-container\">\r\n        {props.items.map((item, index) => (\r\n          <Card\r\n            className=\"search-result-card\"\r\n            type=\"flex\"\r\n            hoverable\r\n            style={{ width: 160 }}\r\n            key={item.num}\r\n            cover={ <img src={`data:image/jpg;base64,${item.thumbnail}`} alt={item.name}/>}\r\n            bodyStyle={{textAlign: 'left', width: '100%', padding: '12px'}}\r\n            onClick={()=>{props.downloader(item.num)}}\r\n          >\r\n            <span>{item.name}</span>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _downloadFile = (dccon_num) => {\r\n    this.setState({loading: true});\r\n    fetch('https://7d2i8oa48i.execute-api.ap-northeast-2.amazonaws.com/prod/download',{\r\n      method: 'POST',\r\n      body: JSON.stringify({dccon_num})\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      var element = document.createElement('a');\r\n      element.setAttribute('href', 'data:text/plain;base64,' + res.body);\r\n      element.setAttribute('download', dccon_num.toString());\r\n      element.style.display = 'none';\r\n      document.body.appendChild(element);\r\n      element.click();\r\n      document.body.removeChild(element);\r\n      this.setState({loading: false});\r\n    });\r\n  }\r\n\r\n  _onPressDownload = () => {\r\n    ReactGA.event({\r\n      'category': 'download',\r\n      'action': 'press',\r\n      'label': this.state.dcconNumber,\r\n    });\r\n    this._downloadFile(this.state.dcconNumber);\r\n  }\r\n\r\n  _onPressChromeWebstore = () => {\r\n    ReactGA.event({\r\n      'category': 'extension-transition',\r\n      'action': 'press'\r\n    })\r\n  }\r\n  \r\n  render(){\r\n    return(\r\n      <div>\r\n        <LoadingOverlay className=\"App\" active={this.state.loading}\r\n          styles={{\r\n            content: (base) => ({\r\n              ...base,\r\n              position: 'fixed',\r\n              top: '40%',\r\n              left: '40%',\r\n              margin: 'auto',\r\n            })\r\n          }}\r\n          spinner text='로딩중...'>\r\n          <a onClick={this._onPressChromeWebstore} href=\"https://chrome.google.com/webstore/detail/dccon-downloader/giaepkpgacklikcdgcoiniapegeakgad\">\r\n            <img src=\"/dccon-downloader/ChromeWebStore_BadgeWBorder_v2_340x96.png\" alt=\"Download at Chrome webstore\"/>\r\n          </a>\r\n          <p> 크롬 확장프로그램이 나왔습니다! 이제 댓글에서, 디시콘 페이지에서 바로바로 다운로드하세요! </p>\r\n          <span>검색결과를 클릭해서 바로 zip파일로 다운로드 가능</span>\r\n          <div className=\"Search-conatiner\">\r\n            <Input.Search\r\n              placeholder=\"검색어\"\r\n              enterButton=\"검색!\"\r\n              size=\"large\"\r\n              onSearch={value => this._search(value)}\r\n            />\r\n          </div>\r\n          <this.SearchResultList items={this.state.searchResult} downloader={this._downloadFile}/>\r\n          <div className=\"Download-conatiner\">\r\n            <span> 디씨콘 번호 </span>\r\n            <input id=\"downloadInput\" onKeyPress={event => { if (event.key === 'Enter') this._onPressDownload(); }}\r\n            onChange={(e)=>{this.setState({dcconNumber: e.target.value})}} placeholder={52640}/>\r\n            <button onClick={this._onPressDownload} disabled={this.state.downloadButtonDisabled}> \r\n              {this.state.downloadButtonDisabled? '다운로드중...' : '다운로드!'}\r\n            </button>\r\n          </div>\r\n          <span> Github Repository: <a href=\"https://github.com/cereme/dccon-downloader\" target=\"_blank\">https://github.com/cereme/dccon-downloader</a> </span>\r\n        </LoadingOverlay>\r\n      </div>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactGA from 'react-ga';\r\n\r\nReactGA.initialize('UA-143376494-1');\r\nReactGA.pageview('/');\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}