{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_search","queryText","ReactGA","event","category","action","label","setState","loading","fetch","method","body","JSON","stringify","query_text","then","res","json","searchResult","parse","_downloadFile","dccon_num","element","document","createElement","setAttribute","filename","style","display","appendChild","click","removeChild","_onPressDownload","state","dcconNumber","_onPressChromeWebstore","downloadButtonDisabled","react_default","a","className","items","map","item","index","card","type","hoverable","width","key","num","cover","src","concat","thumbnail","alt","name","bodyStyle","textAlign","padding","onClick","downloader","_this2","LoadingOverlay_default","active","styles","content","base","objectSpread","position","top","left","margin","spinner","text","href","input","Search","placeholder","enterButton","size","onSearch","value","SearchResultList","id","onKeyPress","onChange","e","target","disabled","React","Component","Boolean","window","location","hostname","match","initialize","pageview","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.572671ac.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport { Input, Card } from 'antd';\nimport ReactGA from 'react-ga';\nimport LoadingOverlay from 'react-loading-overlay'\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n       queryText: '',\n       dcconNumber: 52640,\n       searchResult: [],\n       downloadButtonDisabled: false,\n       loading: false,\n    }\n  }\n\n  _search = (queryText) =>{\n    ReactGA.event({\n      'category': 'search',\n      'action': 'press',\n      'label': queryText,\n    });\n    this.setState({loading: true});\n    fetch('https://7d2i8oa48i.execute-api.ap-northeast-2.amazonaws.com/prod/search',{\n      method: 'POST',\n      body: JSON.stringify({query_text: queryText})\n    })\n    .then(res => res.json())\n    .then(res => {\n      this.setState({searchResult: JSON.parse(res.body), loading: false});\n    });\n  }\n\n  SearchResultList(props) {\n    return (\n      <div className=\"SearchResult-container\">\n        {props.items.map((item, index) => (\n          <Card\n            className=\"search-result-card\"\n            type=\"flex\"\n            hoverable\n            style={{ width: 160 }}\n            key={item.num}\n            cover={ <img src={`data:image/jpg;base64,${item.thumbnail}`} alt={item.name}/>}\n            bodyStyle={{textAlign: 'left', width: '100%', padding: '12px'}}\n            onClick={()=>{props.downloader(item.num)}}\n          >\n            <span>{item.name}</span>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  _downloadFile = (dccon_num) => {\n    this.setState({loading: true});\n    fetch('https://7d2i8oa48i.execute-api.ap-northeast-2.amazonaws.com/prod/download',{\n      method: 'POST',\n      body: JSON.stringify({dccon_num})\n    })\n    .then(res => res.json())\n    .then(res => {\n      var element = document.createElement('a');\n      element.setAttribute('href', 'data:text/plain;base64,' + res.body);\n      element.setAttribute('download', res.filename);\n      element.style.display = 'none';\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n      this.setState({loading: false});\n    });\n  }\n\n  _onPressDownload = () => {\n    ReactGA.event({\n      'category': 'download',\n      'action': 'press',\n      'label': this.state.dcconNumber,\n    });\n    this._downloadFile(this.state.dcconNumber);\n  }\n\n  _onPressChromeWebstore = () => {\n    ReactGA.event({\n      'category': 'extension-transition',\n      'action': 'press'\n    })\n  }\n  \n  render(){\n    return(\n      <div>\n        <LoadingOverlay className=\"App\" active={this.state.loading}\n          styles={{\n            content: (base) => ({\n              ...base,\n              position: 'fixed',\n              top: '40%',\n              left: '40%',\n              margin: 'auto',\n            })\n          }}\n          spinner text='로딩중...'>\n          <a onClick={this._onPressChromeWebstore} href=\"https://chrome.google.com/webstore/detail/dccon-downloader/giaepkpgacklikcdgcoiniapegeakgad\">\n            <img src=\"/dccon-downloader/ChromeWebStore_BadgeWBorder_v2_340x96.png\" alt=\"Download at Chrome webstore\"/>\n          </a>\n          <p> 크롬 확장프로그램이 나왔습니다! 이제 댓글에서, 디시콘 페이지에서 바로바로 다운로드하세요! </p>\n          <span>검색결과를 클릭해서 바로 zip파일로 다운로드 가능</span>\n          <div className=\"Search-conatiner\">\n            <Input.Search\n              placeholder=\"검색어\"\n              enterButton=\"검색!\"\n              size=\"large\"\n              onSearch={value => this._search(value)}\n            />\n          </div>\n          <this.SearchResultList items={this.state.searchResult} downloader={this._downloadFile}/>\n          <div className=\"Download-conatiner\">\n            <span> 디씨콘 번호 </span>\n            <input id=\"downloadInput\" onKeyPress={event => { if (event.key === 'Enter') this._onPressDownload(); }}\n            onChange={(e)=>{this.setState({dcconNumber: e.target.value})}} placeholder={52640}/>\n            <button onClick={this._onPressDownload} disabled={this.state.downloadButtonDisabled}> \n              {this.state.downloadButtonDisabled? '다운로드중...' : '다운로드!'}\n            </button>\n          </div>\n          <span> Github Repository: <a href=\"https://github.com/cereme/dccon-downloader\" target=\"_blank\">https://github.com/cereme/dccon-downloader</a> </span>\n        </LoadingOverlay>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-143376494-1');\nReactGA.pageview('/');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}